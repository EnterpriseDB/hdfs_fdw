-- Connection Settings.
\set HIVE_SERVER         `echo \'"$HIVE_SERVER"\'`
\set HIVE_CLIENT_TYPE           '\'hiveserver2\''
\set HIVE_PORT           `echo \'"$HIVE_PORT"\'`
\set HIVE_USER           `echo \'"$HIVE_USER"\'`
\set HIVE_PASSWORD       `echo \'"$HIVE_PASSWORD"\'`
\set AUTH_TYPE           `echo \'"$AUTH_TYPE"\'`
CREATE DATABASE fdw_regression;
\c fdw_regression postgres
CREATE EXTENSION hdfs_fdw;
-- Create Hadoop FDW Server. log_remote_sql 'true' is required to setup logging for Remote SQL Sent to Hive Server.
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER hdfs_fdw OPTIONS(host :HIVE_SERVER, port :HIVE_PORT, client_type :HIVE_CLIENT_TYPE, log_remote_sql 'true', auth_type :AUTH_TYPE);
-- Create Hadoop USER MAPPING.
CREATE USER MAPPING FOR postgres SERVER hdfs_server OPTIONS (username :HIVE_USER, password :HIVE_PASSWORD);
--********************************************************************
--Datatype Verification with normal WHERE Clause pushdown.
--********************************************************************
--*******  INT2OID --> smallint  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             smallint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
-- The condition will be shown in the Plan
--          Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE (sal  IN (800,2450))
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno FROM emp e
WHERE  sal IN (800,2450)
ORDER BY deptno;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE (sal  IN (800,2450))
(6 rows)

DROP FOREIGN TABLE emp;
--*******  INT8OID --> bigint  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             bigint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
--          Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal > '3000'))
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal > 3000 ORDER BY deptno;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal > '3000'))
(6 rows)

DROP FOREIGN TABLE emp;
--*******  FLOAT4OID --> real  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             real,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal = 2450 ORDER BY deptno;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal = '2450'))
(6 rows)

DROP FOREIGN TABLE emp;
--*******  FLOAT8OID --> double precision  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             double precision,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal BETWEEN 1000 AND 4000 ORDER BY deptno;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal >= '1000')) AND ((sal <= '4000'))
(6 rows)

DROP FOREIGN TABLE emp;
--*******  VARCHAROID --> VARCHAR  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          VARCHAR(10)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT * FROM emp e
WHERE  ename IS NOT NULL ORDER BY deptno;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Output: empno, ename, job, mgr, hiredate, sal, comm, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, job, mgr, hiredate, sal, comm, deptno
         Remote SQL: SELECT * FROM fdw_db.emp WHERE ((ename IS NOT NULL))
(6 rows)

DROP FOREIGN TABLE emp;
--*******  INT4OID --> INTEGER  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          VARCHAR(10)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT ename FROM emp e
WHERE  empno NOT IN (10,20)  ORDER BY ename;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ename
   Sort Key: e.ename
   ->  Foreign Scan on public.emp e
         Output: ename
         Remote SQL: SELECT ename FROM fdw_db.emp WHERE (empno  NOT  IN (10,20))
(6 rows)

DROP FOREIGN TABLE emp;
--******* DATEOID  --> DATE  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  hiredate <= '1980-12-17' ORDER BY deptno;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((hiredate <= '12-17-1980'))
(6 rows)

DROP FOREIGN TABLE emp;
--******* TIMESTAMPOID  --> TIMESTAMP  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        TIMESTAMP,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  hiredate IS NOT NULL ORDER BY deptno;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((hiredate IS NOT NULL))
(6 rows)

DROP FOREIGN TABLE emp;
--******* TIMESTAMPTZOID  --> TIMESTAMP WITH TIME ZONE  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        TIMESTAMP WITH TIME ZONE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  hiredate IS NULL ORDER BY deptno;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((hiredate IS NULL))
(6 rows)

DROP FOREIGN TABLE emp;
--******* TEXTOID  --> TEXT  ************
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        TIMESTAMP WITH TIME ZONE,
    sal             TEXT,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE)SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal LIKE '300%' ORDER BY deptno;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal LIKE '300%'))
(6 rows)

--******* BPCHAROID  --> CHAR  ************
CREATE FOREIGN TABLE chr_date (
   col1              	char(30)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'chr_date');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT * FROM chr_date c
WHERE  col1 = '10' ORDER BY col1;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan on public.chr_date c
   Output: col1
   Remote SQL: SELECT * FROM fdw_db.chr_date WHERE ((col1 = '10'))
(3 rows)

--******* BOOLOID  -->  BOOLEAN ************
CREATE FOREIGN TABLE bool_test (
    bol1              	BOOLEAN,
    bol2                INT
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'bool_test');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT bol1,bol2 FROM bool_test b
WHERE  bol1 = 'f' ORDER BY bol1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Output: bol1, bol2
   Sort Key: b.bol1
   ->  Foreign Scan on public.bool_test b
         Output: bol1, bol2
         Remote SQL: SELECT * FROM fdw_db.bool_test WHERE ((NOT bol1))
(6 rows)

--As per discussed with Dev, build in functions will not be pushed.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT bol1,bol2 FROM bool_test b
WHERE  bol1 = upper('t') ORDER BY bol1;
ERROR:  operator does not exist: boolean = text
LINE 2: WHERE  bol1 = upper('t') ORDER BY bol1;
                    ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
--******* TIMEOID  -->  TIME ************
CREATE FOREIGN TABLE time_test (
    col1              	TIME
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1 FROM time_test b
WHERE  col1 IS NOT NULL ORDER BY col1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: col1
   Sort Key: b.col1
   ->  Foreign Scan on public.time_test b
         Output: col1
         Remote SQL: SELECT * FROM fdw_db.var_date WHERE ((col1 IS NOT NULL))
(6 rows)

--******* NAMEOID  -->  NAME ************
CREATE FOREIGN TABLE name_test (
    col1              	NAME
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1 FROM name_test b
WHERE  col1 NOT IN ('a','b') ORDER BY col1;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Output: col1
   Sort Key: b.col1
   ->  Foreign Scan on public.name_test b
         Output: col1
         Remote SQL: SELECT * FROM fdw_db.var_date WHERE (col1  NOT  IN ('a', 'b'))
(6 rows)

--******* BITOID  -->  BIT ************
CREATE FOREIGN TABLE bit_test (
    col1              	bit
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Execute the Query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1 FROM bit_test b
WHERE  col1 IS NULL ORDER BY col1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Output: col1
   Sort Key: b.col1
   ->  Foreign Scan on public.bit_test b
         Output: col1
         Remote SQL: SELECT * FROM fdw_db.var_date WHERE ((col1 IS NULL))
(6 rows)

-- DROP EXTENSION
DROP EXTENSION hdfs_fdw CASCADE;
NOTICE:  drop cascades to 8 other objects
DETAIL:  drop cascades to server hdfs_server
drop cascades to user mapping for postgres on server hdfs_server
drop cascades to foreign table emp
drop cascades to foreign table chr_date
drop cascades to foreign table bool_test
drop cascades to foreign table time_test
drop cascades to foreign table name_test
drop cascades to foreign table bit_test
\c postgres postgres
DROP DATABASE fdw_regression;
