\set HIVE_SERVER         `echo \'"$HIVE_SERVER"\'`
\set HIVE_CLIENT_TYPE    `echo \'"$CLIENT_TYPE"\'`
\set HIVE_PORT           `echo \'"$HIVE_PORT"\'`
\set HIVE_USER           `echo \'"$HIVE_USER"\'`
\set HIVE_PASSWORD       `echo \'"$HIVE_PASSWORD"\'`
\set AUTH_TYPE           `echo \'"$AUTH_TYPE"\'`
\c contrib_regression
SET hdfs_fdw.enable_order_by_pushdown TO ON;
CREATE EXTENSION IF NOT EXISTS hdfs_fdw;
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER hdfs_fdw
 OPTIONS(host :HIVE_SERVER, port :HIVE_PORT, client_type :HIVE_CLIENT_TYPE, auth_type :AUTH_TYPE);
CREATE USER MAPPING FOR public SERVER hdfs_server
 OPTIONS (username :HIVE_USER, password :HIVE_PASSWORD);
CREATE FOREIGN TABLE dept (
    deptno          INTEGER,
    dname           VARCHAR(14),
    loc             VARCHAR(13)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'dept');
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             INTEGER,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the parameterized
-- WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, ea.deptno FROM emp ea
WHERE sal = (SELECT MAX(sal) FROM emp eb
  WHERE eb.deptno = ea.deptno)
ORDER BY 1, 2, 3;
                                                                         QUERY PLAN                                                                          
-------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp ea
   Output: ea.empno, ea.ename, ea.deptno
   Filter: (ea.sal = (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (max(eb.sal))
           Relations: Aggregate on (fdw_db.emp eb)
           Remote SQL: SELECT max(`sal`) FROM `fdw_db`.`emp` WHERE ((`deptno` = ?))
(9 rows)

SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal > (SELECT AVG(sal) FROM emp
  WHERE  emp.deptno = e.deptno)
ORDER BY 1, 2, 3, 4;
 empno | ename | sal  | deptno 
-------+-------+------+--------
  7499 | ALLEN | 1600 |     30
  7566 | JONES | 2975 |     20
  7698 | BLAKE | 2850 |     30
  7788 | SCOTT | 3000 |     20
  7839 | KING  | 5000 |     10
  7902 | FORD  | 3000 |     20
(6 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE  sal > (SELECT AVG(sal) FROM emp
  WHERE  emp.deptno = e.deptno)
ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: ((e.sal)::numeric > (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`deptno` = ?))
(9 rows)

DROP FOREIGN TABLE emp;
-- Datatype verification with parameterized WHERE Clause.
-- INT2OID --> smallint
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             smallint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: e.empno, e.ename, e.sal, e.deptno
   Inner Unique: true
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Subquery Scan on "ANY_subquery"
         Output: "ANY_subquery".avg
         Filter: ((e.sal)::numeric = "ANY_subquery".avg)
         ->  Foreign Scan
               Output: (avg(emp.sal))
               Relations: Aggregate on (fdw_db.emp)
               Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(13 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal NOT IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY ((e.sal)::numeric = (SubPlan 1).col1)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal >
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: ((e.sal)::numeric > (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

DROP FOREIGN TABLE emp;
-- INT8OID --> bigint
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             bigint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: e.empno, e.ename, e.sal, e.deptno
   Inner Unique: true
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Subquery Scan on "ANY_subquery"
         Output: "ANY_subquery".avg
         Filter: ((e.sal)::numeric = "ANY_subquery".avg)
         ->  Foreign Scan
               Output: (avg(emp.sal))
               Relations: Aggregate on (fdw_db.emp)
               Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(13 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal NOT IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY ((e.sal)::numeric = (SubPlan 1).col1)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal >
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: ((e.sal)::numeric > (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

DROP FOREIGN TABLE emp;
-- FLOAT4OID --> real
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             real,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: e.empno, e.ename, e.sal, e.deptno
   Inner Unique: true
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Subquery Scan on "ANY_subquery"
         Output: "ANY_subquery".avg
         Filter: (e.sal = "ANY_subquery".avg)
         ->  Foreign Scan
               Output: (avg(emp.sal))
               Relations: Aggregate on (fdw_db.emp)
               Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(13 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal NOT IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY (e.sal = (SubPlan 1).col1)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal >
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (e.sal > (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

DROP FOREIGN TABLE emp;
-- FLOAT8OID --> double precision
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             double precision,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop
   Output: e.empno, e.ename, e.sal, e.deptno
   Inner Unique: true
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Subquery Scan on "ANY_subquery"
         Output: "ANY_subquery".avg
         Filter: (e.sal = "ANY_subquery".avg)
         ->  Foreign Scan
               Output: (avg(emp.sal))
               Relations: Aggregate on (fdw_db.emp)
               Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(13 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal NOT IN
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY (e.sal = (SubPlan 1).col1)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal >
 (SELECT AVG(sal) FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (e.sal > (SubPlan 1))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan
           Output: (avg(emp.sal))
           Relations: Aggregate on (fdw_db.emp)
           Remote SQL: SELECT avg(`sal`) FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(9 rows)

DROP FOREIGN TABLE emp;
-- VARCHAROID --> VARCHAR
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          VARCHAR(10)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE ename IN
 (SELECT ename FROM emp WHERE  emp.ename = e.ename)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: e.empno, e.ename, e.sal, e.deptno
   Join Filter: ((e.ename)::text = (emp.ename)::text)
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Materialize
         Output: emp.ename
         ->  Foreign Scan on public.emp
               Output: emp.ename
               Remote SQL: SELECT `ename` FROM `fdw_db`.`emp` ORDER BY `ename` ASC NULLS LAST
(11 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE ename NOT IN
 (SELECT ename FROM emp WHERE  emp.ename = e.ename)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY ((e.ename)::text = ((SubPlan 1).col1)::text)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.emp
           Output: emp.ename
           Remote SQL: SELECT `ename` FROM `fdw_db`.`emp` WHERE ((`ename` = ?))
(8 rows)

DROP FOREIGN TABLE emp;
-- DATEOID --> DATE
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT comm
 FROM emp e
 WHERE hiredate IN
 (SELECT hiredate FROM emp WHERE  emp.hiredate = e.hiredate)
 ORDER BY comm;
                                             QUERY PLAN                                             
----------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: e.comm
   Join Filter: (e.hiredate = emp.hiredate)
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `hiredate`, `comm` FROM `fdw_db`.`emp` ORDER BY `comm` ASC NULLS LAST
   ->  Materialize
         Output: emp.hiredate
         ->  Foreign Scan on public.emp
               Output: emp.hiredate
               Remote SQL: SELECT `hiredate` FROM `fdw_db`.`emp` ORDER BY `hiredate` ASC NULLS LAST
(11 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT comm
 FROM emp e
 WHERE hiredate NOT IN
 (SELECT hiredate FROM emp WHERE  emp.hiredate = e.hiredate)
 ORDER BY comm;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.comm
   Filter: (NOT (ANY (e.hiredate = (SubPlan 1).col1)))
   Remote SQL: SELECT `hiredate`, `comm` FROM `fdw_db`.`emp` ORDER BY `comm` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.emp
           Output: emp.hiredate
           Remote SQL: SELECT `hiredate` FROM `fdw_db`.`emp` WHERE ((`hiredate` = ?))
(8 rows)

DROP FOREIGN TABLE emp;
-- TIMESTAMPOID --> TIMESTAMP
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.TIMESTAMP,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp2');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE hiredate IN
 (SELECT hiredate FROM emp WHERE  emp.hiredate = e.hiredate)
 ORDER BY 1, 2, 3, 4;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: e.empno, e.ename, e.sal, e.deptno
   Join Filter: (e.hiredate = emp.hiredate)
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `hiredate`, `sal`, `deptno` FROM `fdw_db`.`emp2` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Materialize
         Output: emp.hiredate
         ->  Foreign Scan on public.emp
               Output: emp.hiredate
               Remote SQL: SELECT `hiredate` FROM `fdw_db`.`emp2` ORDER BY `hiredate` ASC NULLS LAST
(11 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE  hiredate IN
 (SELECT hiredate FROM emp WHERE  emp.hiredate = e.hiredate)
 ORDER BY 1, 2, 3, 4;
                                                                                              QUERY PLAN                                                                                              
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: e.empno, e.ename, e.sal, e.deptno
   Join Filter: (e.hiredate = emp.hiredate)
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `hiredate`, `sal`, `deptno` FROM `fdw_db`.`emp2` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Materialize
         Output: emp.hiredate
         ->  Foreign Scan on public.emp
               Output: emp.hiredate
               Remote SQL: SELECT `hiredate` FROM `fdw_db`.`emp2` ORDER BY `hiredate` ASC NULLS LAST
(11 rows)

DROP FOREIGN TABLE emp;
-- TEXTOID --> TEXT
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             TEXT,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE sal IN
 (SELECT sal FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                       QUERY PLAN                                                                                        
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: e.empno, e.ename, e.sal, e.deptno
   Join Filter: (e.sal = emp.sal)
   ->  Foreign Scan on public.emp e
         Output: e.empno, e.ename, e.job, e.mgr, e.hiredate, e.sal, e.comm, e.deptno
         Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   ->  Materialize
         Output: emp.sal
         ->  Foreign Scan on public.emp
               Output: emp.sal
               Remote SQL: SELECT `sal` FROM `fdw_db`.`emp` ORDER BY `sal` ASC NULLS LAST
(11 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE sal NOT IN
 (SELECT sal FROM emp WHERE  emp.sal = e.sal)
 ORDER BY 1, 2, 3, 4;
                                                                                    QUERY PLAN                                                                                     
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.emp e
   Output: e.empno, e.ename, e.sal, e.deptno
   Filter: (NOT (ANY (e.sal = (SubPlan 1).col1)))
   Remote SQL: SELECT `empno`, `ename`, `sal`, `deptno` FROM `fdw_db`.`emp` ORDER BY `empno` ASC NULLS LAST, `ename` ASC NULLS LAST, `sal` ASC NULLS LAST, `deptno` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.emp
           Output: emp.sal
           Remote SQL: SELECT `sal` FROM `fdw_db`.`emp` WHERE ((`sal` = ?))
(8 rows)

DROP FOREIGN TABLE emp;
-- BOOLOID -->  BOOLEAN ************
CREATE FOREIGN TABLE bool_test (
    bol1              	BOOLEAN,
    bol2                INT
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'bool_test');
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT bol1, bol2
 FROM bool_test b
 WHERE bol1 IN
 (SELECT bol1 FROM bool_test WHERE  bool_test.bol1 = b.bol1)
 ORDER BY 1, 2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: b.bol1, b.bol2
   Join Filter: (b.bol1 = bool_test.bol1)
   ->  Foreign Scan on public.bool_test b
         Output: b.bol1, b.bol2
         Remote SQL: SELECT * FROM `fdw_db`.`bool_test` ORDER BY `bol1` ASC NULLS LAST, `bol2` ASC NULLS LAST
   ->  Materialize
         Output: bool_test.bol1
         ->  Foreign Scan on public.bool_test
               Output: bool_test.bol1
               Remote SQL: SELECT `bol1` FROM `fdw_db`.`bool_test` ORDER BY `bol1` ASC NULLS LAST
(11 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT bol1, bol2
 FROM bool_test b
 WHERE bol1 IN
 (SELECT bol1 FROM bool_test WHERE  bool_test.bol1 = b.bol1)
 ORDER BY 1, 2;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Nested Loop Semi Join
   Output: b.bol1, b.bol2
   Join Filter: (b.bol1 = bool_test.bol1)
   ->  Foreign Scan on public.bool_test b
         Output: b.bol1, b.bol2
         Remote SQL: SELECT * FROM `fdw_db`.`bool_test` ORDER BY `bol1` ASC NULLS LAST, `bol2` ASC NULLS LAST
   ->  Materialize
         Output: bool_test.bol1
         ->  Foreign Scan on public.bool_test
               Output: bool_test.bol1
               Remote SQL: SELECT `bol1` FROM `fdw_db`.`bool_test` ORDER BY `bol1` ASC NULLS LAST
(11 rows)

DROP FOREIGN TABLE bool_test;
-- JSONOID --> json
CREATE FOREIGN TABLE json_test (
    bol1              	json,
    bol2                INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'bool_test');
-- Error will be displayed as JSON Not supported.
SELECT bol1 FROM json_test;
ERROR:  unsupported PostgreSQL data type
HINT:  Supported data types are BOOL, INT, DATE, TIME, TIMESTAMP, FLOAT, BYTEA, SERIAL, REAL, DOUBLE, CHAR, TEXT, STRING, NUMERIC, DECIMAL and VARCHAR.
DROP FOREIGN TABLE json_test;
-- TIMEOID --> TIME
CREATE FOREIGN TABLE time_test (
    col1              	TIME
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Plan will show column being pushed down
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1
 FROM time_test b
 WHERE col1 NOT IN (SELECT col1 FROM time_test WHERE  time_test.col1 = b.col1)
 ORDER BY col1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.time_test b
   Output: b.col1
   Filter: (NOT (ANY (b.col1 = (SubPlan 1).col1)))
   Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.time_test
           Output: time_test.col1
           Remote SQL: SELECT * FROM `fdw_db`.`var_date` WHERE ((`col1` = ?))
(8 rows)

-- Error will be displayed as TIME is not handled by JDBC Driver.
SELECT col1 FROM time_test b
 WHERE col1 NOT IN (SELECT col1 FROM time_test WHERE  time_test.col1 = b.col1)
 ORDER BY col1;
ERROR:  failed to bind variable: 1083
DROP FOREIGN TABLE time_test;
-- NAMEOID --> NAME
CREATE FOREIGN TABLE name_test (
    col1              	NAME
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Data will be returned and column will be pushed.
EXPLAIN (COSTS FALSE,VERBOSE TRUE)  SELECT col1
 FROM name_test b
 WHERE col1 NOT IN
 (SELECT col1 FROM name_test WHERE  name_test.col1 = b.col1)
 ORDER BY col1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.name_test b
   Output: b.col1
   Filter: (NOT (ANY (b.col1 = (SubPlan 1).col1)))
   Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.name_test
           Output: name_test.col1
           Remote SQL: SELECT * FROM `fdw_db`.`var_date` WHERE ((`col1` = ?))
(8 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE)  SELECT col1
 FROM name_test b
 WHERE col1 IN
 (SELECT col1 FROM name_test WHERE  name_test.col1 = b.col1)
 ORDER BY col1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Merge Semi Join
   Output: b.col1
   Merge Cond: (b.col1 = name_test.col1)
   ->  Foreign Scan on public.name_test b
         Output: b.col1
         Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
   ->  Foreign Scan on public.name_test
         Output: name_test.col1
         Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
(9 rows)

DROP FOREIGN TABLE name_test;
-- BITOID --> BIT
CREATE FOREIGN TABLE bit_test (
    col1              	bit
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'var_date');
-- Data will be returned and column will be pushed.
EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1
 FROM bit_test b
 WHERE col1 NOT IN
 (SELECT col1 FROM bit_test WHERE  bit_test.col1 = b.col1)
 ORDER BY col1;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Foreign Scan on public.bit_test b
   Output: b.col1
   Filter: (NOT (ANY (b.col1 = (SubPlan 1).col1)))
   Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
   SubPlan 1
     ->  Foreign Scan on public.bit_test
           Output: bit_test.col1
           Remote SQL: SELECT * FROM `fdw_db`.`var_date` WHERE ((`col1` = ?))
(8 rows)

EXPLAIN (COSTS FALSE,VERBOSE TRUE) SELECT col1
 FROM bit_test b
 WHERE col1 IN
 (SELECT col1 FROM bit_test WHERE  bit_test.col1 = b.col1)
 ORDER BY col1;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Merge Semi Join
   Output: b.col1
   Merge Cond: (b.col1 = bit_test.col1)
   ->  Foreign Scan on public.bit_test b
         Output: b.col1
         Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
   ->  Foreign Scan on public.bit_test
         Output: bit_test.col1
         Remote SQL: SELECT * FROM `fdw_db`.`var_date` ORDER BY `col1` ASC NULLS LAST
(9 rows)

DROP FOREIGN TABLE bit_test;
-- Verify that correct data is displayed.
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE hiredate IN
 (SELECT hiredate FROM emp WHERE emp.deptno < e.deptno OR emp.deptno > e.deptno)
 ORDER BY 1, 2, 3, 4;
 empno | ename | sal  | deptno 
-------+-------+------+--------
  7900 | JAMES | 950  |     30
  7902 | FORD  | 3000 |     20
(2 rows)

SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE hiredate IN
 (SELECT hiredate FROM emp WHERE emp.empno < e.empno OR emp.deptno > e.deptno)
 ORDER BY 1, 2, 3, 4;
 empno | ename | sal  | deptno 
-------+-------+------+--------
  7902 | FORD  | 3000 |     20
(1 row)

SET hdfs_fdw.enable_order_by_pushdown TO OFF;
DROP FOREIGN TABLE emp;
DROP FOREIGN TABLE dept;
DROP USER MAPPING FOR public SERVER hdfs_server;
DROP SERVER hdfs_server;
DROP EXTENSION hdfs_fdw;
