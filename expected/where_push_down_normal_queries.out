\set HIVE_SERVER         `echo \'"$HIVE_SERVER"\'`
\set HIVE_CLIENT_TYPE    `echo \'"$CLIENT_TYPE"\'`
\set HIVE_PORT           `echo \'"$HIVE_PORT"\'`
\set HIVE_USER           `echo \'"$HIVE_USER"\'`
\set HIVE_PASSWORD       `echo \'"$HIVE_PASSWORD"\'`
\set AUTH_TYPE           `echo \'"$AUTH_TYPE"\'`
\c contrib_regression
CREATE EXTENSION IF NOT EXISTS hdfs_fdw;
CREATE SERVER hdfs_server FOREIGN DATA WRAPPER hdfs_fdw
 OPTIONS(host :HIVE_SERVER, port :HIVE_PORT, client_type :HIVE_CLIENT_TYPE, auth_type :AUTH_TYPE);
CREATE USER MAPPING FOR public SERVER hdfs_server
 OPTIONS (username :HIVE_USER, password :HIVE_PASSWORD);
-- Datatype verification with normal WHERE clause push-down.
-- INT2OID --> smallint
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             smallint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
-- The condition will be shown in the plan.
-- Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE (sal  IN (800,2450))
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal as "salary", deptno
 FROM emp e
 WHERE sal IN (800,2450)
 ORDER BY deptno;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE (sal  IN (800,2450))
(6 rows)

DROP FOREIGN TABLE emp;
-- INT8OID --> bigint
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             bigint,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
-- Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal > '3000'))
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE sal > 3000
 ORDER BY deptno;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal > '3000'))
(6 rows)

DROP FOREIGN TABLE emp;
-- FLOAT4OID --> real
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             real,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal, deptno FROM emp e
WHERE sal = 2450 ORDER BY deptno;
                                         QUERY PLAN                                          
---------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal = '2450'))
(6 rows)

DROP FOREIGN TABLE emp;
-- FLOAT8OID --> double precision
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             double precision,
    comm            INTEGER,
    deptno          INTEGER
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE sal BETWEEN 1000 AND 4000
 ORDER BY deptno;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((sal >= '1000')) AND ((sal <= '4000'))
(6 rows)

DROP FOREIGN TABLE emp;
-- VARCHAROID --> VARCHAR
-- TIMESTAMPOID  --> TIMESTAMP
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          VARCHAR(10)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT *
 FROM emp e
 WHERE ename IS NOT NULL
 ORDER BY deptno;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Output: empno, ename, job, mgr, hiredate, sal, comm, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, job, mgr, hiredate, sal, comm, deptno
         Remote SQL: SELECT * FROM fdw_db.emp WHERE ((ename IS NOT NULL))
(6 rows)

-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE hiredate IS NOT NULL
 ORDER BY deptno;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((hiredate IS NOT NULL))
(6 rows)

DROP FOREIGN TABLE emp;
-- INT4OID --> INTEGER
--DATEOID  --> DATE
CREATE FOREIGN TABLE emp (
    empno           INTEGER,
    ename           VARCHAR(10),
    job             VARCHAR(9),
    mgr             INTEGER,
    hiredate        pg_catalog.DATE,
    sal             VARCHAR(10),
    comm            INTEGER,
    deptno          VARCHAR(10)
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'emp');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT ename
 FROM emp e
 WHERE empno NOT IN (10,20)
 ORDER BY ename;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: ename
   Sort Key: e.ename
   ->  Foreign Scan on public.emp e
         Output: ename
         Remote SQL: SELECT ename FROM fdw_db.emp WHERE (empno  NOT  IN (10,20))
(6 rows)

-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT empno, ename, sal, deptno
 FROM emp e
 WHERE hiredate <= '1980-12-17'
 ORDER BY deptno;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Sort
   Output: empno, ename, sal, deptno
   Sort Key: e.deptno
   ->  Foreign Scan on public.emp e
         Output: empno, ename, sal, deptno
         Remote SQL: SELECT empno, ename, sal, deptno FROM fdw_db.emp WHERE ((hiredate <= '12-17-1980'))
(6 rows)

DROP FOREIGN TABLE emp;
--BOOLOID  -->  BOOLEAN
CREATE FOREIGN TABLE bool_test (
    bol1              	BOOLEAN,
    bol2                INT
)
SERVER hdfs_server OPTIONS (dbname 'fdw_db', table_name 'bool_test');
-- Execute the query and the normal WHERE clause will be pushed as shown here.
EXPLAIN (COSTS FALSE, VERBOSE TRUE) SELECT bol1,bol2
 FROM bool_test b
 WHERE bol1 = 'f'
 ORDER BY bol1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Output: bol1, bol2
   Sort Key: b.bol1
   ->  Foreign Scan on public.bool_test b
         Output: bol1, bol2
         Remote SQL: SELECT * FROM fdw_db.bool_test WHERE ((NOT bol1))
(6 rows)

DROP FOREIGN TABLE bool_test;
--Cleanup
DROP USER MAPPING FOR public SERVER hdfs_server;
DROP SERVER hdfs_server;
DROP EXTENSION hdfs_fdw;
